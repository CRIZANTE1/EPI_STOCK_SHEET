import streamlit as st
import pandas as pd
import os
import json
import bcrypt
from datetime import datetime
from auth import is_admin
from Utils.budget_forecast import generate_budget_forecast
import io
from Utils.pdf_generator import create_forecast_pdf_from_report


def forecast_budget_page():
    st.header("Previs√£o Or√ßament√°ria Anual")
    st.write("Esta ferramenta utiliza IA para analisar o hist√≥rico de consumo e gerar uma previs√£o de gastos com EPIs para o pr√≥ximo ano.")
    
    sheet_operations = SheetOperations()
    
    col1, col2 = st.columns(2)
    with col1:
        ano_base = st.number_input("Ano base para an√°lise:", min_value=2020, max_value=2030, value=datetime.now().year)
    with col2:
        margem_seguranca = st.slider("Margem de seguran√ßa (%):", min_value=0, max_value=50, value=15, 
                                     help="Percentual adicional para cobrir imprevistos")
    
    if st.button("Gerar Previs√£o Or√ßament√°ria", type="primary"):
        with st.spinner("Analisando dados hist√≥ricos e gerando previs√£o..."):
            resultado = generate_budget_forecast(sheet_operations, ano_base, margem_seguranca)
            
            if "erro" in resultado:
                st.error(resultado["erro"])
            else:
                st.success("‚úÖ Previs√£o gerada com sucesso!")
                
                # Exibir resumo
                col1, col2, col3 = st.columns(3)
                col1.metric("Total Previsto", f"R$ {resultado['total_previsto']:,.2f}")
                col2.metric("Com Margem de Seguran√ßa", f"R$ {resultado['total_com_margem']:,.2f}")
                col3.metric("Margem Aplicada", f"{margem_seguranca}%")
                
                # Exibir relat√≥rio completo
                st.markdown("---")
                st.markdown(resultado["relatorio_completo"])
                
                # Bot√£o para download em PDF
                st.markdown("---")
                if st.button("üì• Baixar Relat√≥rio em PDF"):
                    pdf_buffer = create_forecast_pdf_from_report(resultado["relatorio_completo"])
                    st.download_button(
                        label="Clique aqui para baixar o PDF",
                        data=pdf_buffer,
                        file_name=f"Previsao_Orcamentaria_{ano_base + 1}.pdf",
                        mime="application/pdf"
                    )

def admin_page():
    if not is_admin():
        st.error("Acesso negado. Esta p√°gina √© restrita a administradores.")
        if st.button("Voltar para P√°gina Principal"):
            st.session_state.pagina_atual = 'principal'
            st.rerun()
        return

    st.title("Painel de Administra√ß√£o")
    opcao_admin = st.sidebar.radio(
        "Selecione a fun√ß√£o:",
        ["Configura√ß√µes do Sistema", "Voltar para Principal"]
    )

    if opcao_admin == "Voltar para Principal":
        st.session_state.pagina_atual = 'principal'
        st.rerun()
    else:
        st.header("Configura√ß√µes do Sistema")
        
        st.subheader("Informa√ß√µes de Login OIDC")
        st.json({
            "status": "Ativo",
            "provedor": "Configurado no secrets.toml"
        })

        st.markdown("""
        Para alterar as configura√ß√µes de login OIDC:

        1. Edite o arquivo `.streamlit/secrets.toml`
        2. Configure as credenciais do provedor OIDC desejado
        3. Reinicie a aplica√ß√£o para que as altera√ß√µes tenham efeito
        """)

        st.subheader("Status do Sistema")
        st.json({
            "sistema": "Controle de Estoque de EPIs",
            "vers√£o": "1.0.0",
            "modo_login": "OIDC (OpenID Connect)",
            "status": "Ativo",
            "Developer": "Cristian Ferreira Carlos",
            "Data": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })

