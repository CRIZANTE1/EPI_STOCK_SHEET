import streamlit as st
import pandas as pd
import numpy as np
from End.Operations import SheetOperations
from datetime import datetime
import plotly.express as px
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from auth import is_admin

def analytics_page():
    
    if not is_admin():
        st.error("Acesso Negado üîí")
        st.warning("Esta p√°gina cont√©m an√°lises estrat√©gicas e √© restrita a administradores.")
        st.info("Por favor, selecione outra op√ß√£o no menu lateral.")
        return # Impede a execu√ß√£o do resto do c√≥digo para n√£o-admins

    st.title("An√°lise de Utiliza√ß√£o de EPIs")
    
    sheet_operations = SheetOperations()
    
    @st.cache_data(ttl=600)
    def load_analytics_data():
        
        data = sheet_operations.carregar_dados()
        if data and len(data) > 1:
            df = pd.DataFrame(data[1:], columns=data[0])
            df['quantity'] = pd.to_numeric(df['quantity'], errors='coerce')
            df.dropna(subset=['quantity'], inplace=True)
            df['quantity'] = df['quantity'].astype(int)
            
            df['date'] = pd.to_datetime(df['date'], errors='coerce')
            return df
        return pd.DataFrame()

    df_full = load_analytics_data()
    
    if df_full.empty:
        st.error("N√£o foi poss√≠vel carregar os dados para an√°lise ou n√£o h√° dados v√°lidos.")
        return

    # Pr√©-processamento dos dados de sa√≠da
    df = df_full[df_full['transaction_type'].str.lower() == 'sa√≠da'].copy()
    
    if df.empty:
        st.warning("Nenhuma transa√ß√£o de sa√≠da encontrada para an√°lise.")
        return
        
    # Filtros em linha √∫nica
    col1, col2 = st.columns([1, 2])
    with col1:
        anos_disponiveis = sorted(df['date'].dt.year.unique(), reverse=True)
        ano_selecionado = st.selectbox("Ano:", anos_disponiveis)
    
    with col2:
        meses = {i: nome for i, nome in enumerate(["Todos", "Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho", 
                                  "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"], 0)}
        mes_selecionado = st.selectbox("M√™s:", list(meses.values()))
    
    # Filtragem dos dados
    df_filtrado = df[df['date'].dt.year == ano_selecionado]
    if mes_selecionado != "Todos":
        mes_num = [k for k, v in meses.items() if v == mes_selecionado][0]
        df_filtrado = df_filtrado[df_filtrado['date'].dt.month == mes_num]
    
    # M√©tricas principais em uma linha compacta
    col1, col2, col3 = st.columns(3)
    with col1: st.metric("Total Requisi√ß√µes", len(df_filtrado))
    with col2: st.metric("Usu√°rios √önicos", df_filtrado['requester'].nunique())
    with col3: st.metric("EPIs √önicos", df_filtrado['epi_name'].nunique())
    
    # An√°lise Principal em Tabs
    tab1, tab2, tab3 = st.tabs(["üìä Tend√™ncias & Proje√ß√µes", "üì¶ Top EPIs", "üîç An√°lises Avan√ßadas"])
    
    with tab1:
        st.subheader("Tend√™ncia de Consumo e Proje√ß√£o")
        
        # Prepara√ß√£o de dados para an√°lise temporal
        df_temporal = df.copy()
        df_temporal['yearmonth'] = df_temporal['date'].dt.to_period('M')
        consumo_mensal = df_temporal.groupby('yearmonth')['quantity'].sum()
        consumo_mensal = consumo_mensal.reset_index()
        consumo_mensal['yearmonth'] = consumo_mensal['yearmonth'].dt.to_timestamp()
        
        if len(consumo_mensal) >= 3:  # Precisamos de pelo menos 3 pontos para proje√ß√£o
            # Criando proje√ß√£o para 3 meses
            modelo = ExponentialSmoothing(
                consumo_mensal['quantity'],
                trend='add',
                seasonal=None,
                seasonal_periods=None
            )
            
            modelo_ajustado = modelo.fit()
            
            # Projetando pr√≥ximos 3 meses
            ultimo_mes = consumo_mensal['yearmonth'].iloc[-1]
            proximos_meses = pd.date_range(start=ultimo_mes, periods=4, freq='M')[1:]
            
            previsao = modelo_ajustado.forecast(3)
            df_previsao = pd.DataFrame({
                'yearmonth': proximos_meses,
                'quantity': previsao.values
            })
            
            # Combinando dados hist√≥ricos com proje√ß√£o
            df_completo = pd.concat([
                consumo_mensal,
                df_previsao
            ])
            
            # Calculando tend√™ncia percentual
            if len(consumo_mensal) >= 2:
                variacao = ((previsao.mean() / consumo_mensal['quantity'].mean()) - 1) * 100
                tendencia_texto = f"‚Üë +{variacao:.1f}%" if variacao > 0 else f"‚Üì {variacao:.1f}%"
                st.metric("Tend√™ncia de Consumo (3 meses)", tendencia_texto)
            
            # Gr√°fico com dados hist√≥ricos e proje√ß√£o
            fig = px.line(df_completo, x='yearmonth', y='quantity', markers=True)
            fig.add_scatter(x=df_previsao['yearmonth'], y=df_previsao['quantity'], 
                           name='Proje√ß√£o', line=dict(dash='dash'))
            fig.update_layout(
                xaxis_title="Per√≠odo",
                yaxis_title="Quantidade",
                title="Consumo Hist√≥rico e Proje√ß√£o Futura"
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("Dados insuficientes para gerar proje√ß√£o. Necess√°rio pelo menos 3 meses de hist√≥rico.")
    
    with tab2:
        col1, col2 = st.columns(2)
        
        with col1:
            top_epis = df_filtrado.groupby('epi_name')['quantity'].sum().sort_values(ascending=False).head(5)
            fig = px.bar(top_epis, labels={'value': 'Quantidade', 'index': 'EPI'})
            fig.update_layout(title="Top 5 EPIs Mais Requisitados")
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            top_users = df_filtrado.groupby('requester')['quantity'].sum().sort_values(ascending=False).head(5)
            fig = px.bar(top_users, labels={'value': 'Quantidade', 'index': 'Requisitante'})
            fig.update_layout(title="Top 5 Usu√°rios por Volume")
            st.plotly_chart(fig, use_container_width=True)
    
    with tab3:
        # An√°lise Compacta de Frequ√™ncia
        dias_intervalo = st.slider("Identificar requisi√ß√µes com intervalo menor que (dias):", 1, 30, 7)
        
        # An√°lise de frequ√™ncia simplificada
        df_ordenado = df_filtrado.sort_values(['requester', 'epi_name', 'date'])
        df_ordenado['intervalo'] = df_ordenado.groupby(['requester', 'epi_name'])['date'].diff().dt.days
        
        requisicoes_frequentes = df_ordenado[
            (df_ordenado['intervalo'] <= dias_intervalo) & 
            (df_ordenado['intervalo'].notna())
        ]
        
        if not requisicoes_frequentes.empty:
            st.warning(f"{len(requisicoes_frequentes)} requisi√ß√µes em intervalo menor que {dias_intervalo} dias")
            
            with st.expander("Ver Detalhes"):
                st.dataframe(
                    requisicoes_frequentes[['date', 'requester', 'epi_name', 'quantity', 'intervalo']]
                    .rename(columns={
                        'date': 'Data', 'requester': 'Requisitante', 'epi_name': 'EPI',
                        'quantity': 'Quantidade', 'intervalo': 'Dias desde √∫ltima requisi√ß√£o'
                    })
                    .sort_values('Data', ascending=False),
                    hide_index=True
                )
        else:
            st.success("Nenhuma requisi√ß√£o frequente identificada no per√≠odo.") 


