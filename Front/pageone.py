import streamlit as st
import pandas as pd
from End.Operations import SheetOperations
from datetime import datetime
from fuzzywuzzy import process
import altair as alt
import plotly.express as px 
import calendar
from auth import is_admin


def configurar_pagina():
    st.set_page_config(
        page_title="P√°gina Inicial",
        page_icon="üìã",
        layout="wide",
        initial_sidebar_state="expanded"
    )
       
        
def front_page():
    
    st.title("Controle de Estoque de EPIs") 
       
    sheet_operations = SheetOperations()

    if 'data' not in st.session_state:
        data = sheet_operations.carregar_dados()
        if data:
            df = pd.DataFrame(data[1:], columns=data[0])
            st.session_state['data'] = df
        else:
            st.error("N√£o foi poss√≠vel carregar a planilha")
            return

    if 'data' in st.session_state:
        df = st.session_state['data']
        
    # Converter a coluna 'Date' para o formato datetime
    df['date'] = pd.to_datetime(df['date'], errors='coerce')
    
    # Tratar valores vazios na coluna 'value' antes de converter
    df['value'] = df['value'].apply(lambda x: 0 if x == '' else float(str(x).replace('.', '').replace(',', '.')))

    # Primeiro mostrar as fun√ß√µes de edi√ß√£o
    entrance_exit_edit_delete()

    # Depois mostrar o DataFrame
    st.write("### Registros de Entradas e Sa√≠das")
    st.dataframe(data=df,
                 column_config={
                     'value': st.column_config.NumberColumn(
                         "Valor",
                         help="O pre√ßo do material em Reais",
                         min_value=0,
                         max_value=100000,
                         step=1,
                         format='$ %.2f'
                     ),
                     'epi_name': st.column_config.TextColumn(
                         'Equipamento',
                         help='Nome do EPI',
                         default='st.',
                         max_chars=50,
                     ),
                     'quantity': st.column_config.NumberColumn(
                         'Quantidade',
                         help='Quantidade de EPI',
                         min_value=0,
                         max_value=1000000,
                         step=1,
                         format='%.0f',
                     ),
                     'transaction_type': st.column_config.TextColumn(
                         'Transa√ß√£o',
                         help='Entrada ou Sa√≠da',
                         default='st.',
                         max_chars=50,
                     ),
                     'CA': st.column_config.NumberColumn(
                         'CA',
                         help='Certificado de Aprova√ß√£o se aplic√°vel',
                         min_value=0,
                         max_value=1000000,
                         step=1,
                         format='%.0f',
                     ),
                     'date': st.column_config.DateColumn(
                         'Data',
                         help='Data da transa√ß√£o',
                         format='DD/MM/YYYY',
                         step=1,
                     ),
                     'requester': st.column_config.TextColumn(
                         'Requisitante',
                         help='Requisitante do Equipamento',
                         default='st.',
                         max_chars=50,
                     ),
                 }, hide_index=True)    
    
    # Por √∫ltimo, mostrar o gr√°fico
    st.write("### An√°lise do Estoque")
    calc_position(df)

    # Adicionando a se√ß√£o de an√°lise de uso de EPI
    st.write("### Insights de Uso de EPI")
    analyze_epi_usage_minimalist(df)

#-----------------------------------------------------------------------------------------------------------------------
    """
    A fun√ß√£o `calc_position` calcula a posi√ß√£o atual do estoque de itens com base nos dados de entrada e
    visualiza os resultados usando Altair para exibir um gr√°fico de barras.
    
    :param name: O par√¢metro `name` na fun√ß√£o `get_closest_match_name` √© o nome para o qual voc√™
    deseja encontrar a correspond√™ncia mais pr√≥xima na lista de op√ß√µes
    :param choices: O par√¢metro `choices` na fun√ß√£o `get_closest_match_name` representa uma lista
    de op√ß√µes ou nomes para comparar com o `name` de entrada a fim de encontrar a correspond√™ncia mais pr√≥xima usando
    correspond√™ncia de string difusa
    :return: A fun√ß√£o `calc_position` retorna uma visualiza√ß√£o da posi√ß√£o atual do estoque para
    os 10 menores valores, incluindo valores negativos e zero, usando Altair. A fun√ß√£o calcula
    o estoque atual subtraindo as sa√≠das totais das entradas totais de itens de Equipamento de Prote√ß√£o Individual (EPI) em um DataFrame, 
    depois seleciona os 10 menores valores para visualiza√ß√£o em um gr√°fico de barras. Se os valores de estoque calculados
    """
def get_closest_match_name(name, choices):
    # Retorna o nome mais aproximado usando a fun√ß√£o `extractOne` do fuzzywuzzy
    closest_match, score = process.extractOne(name, choices)
    # Retorna o nome mais aproximado usando a fun√ß√£o `extractOne` do fuzzywuzzy
    # Aumenta o limiar para maior precis√£o, se necess√°rio, ou diminui se estiver agrupando demais
    closest_match, score = process.extractOne(name, choices, score_cutoff=90) # Ajustado score_cutoff
    return closest_match if score >= 90 else name # Retorna o original se a pontua√ß√£o for baixa

def calc_position(df):
    # Fazer uma c√≥pia para evitar SettingWithCopyWarning
    df = df.copy()

    # Garantir que a coluna 'quantity' seja num√©rica, preenchendo NaNs com 0
    df['quantity'] = pd.to_numeric(df['quantity'], errors='coerce').fillna(0)

    # Normalizar nomes dos EPIs usando uma nova coluna
    unique_epi_names = df['epi_name'].dropna().unique()  # Ignorar NaNs nos nomes
    if len(unique_epi_names) == 0:
        st.warning("N√£o h√° nomes de EPI v√°lidos nos dados.")
        return
        
    name_mapping = {name: get_closest_match_name(name, unique_epi_names) for name in unique_epi_names}
    df['epi_name_normalized'] = df['epi_name'].map(name_mapping)

    # Filtrar linhas onde a normaliza√ß√£o falhou (raro, mas poss√≠vel se 'epi_name' for NaN)
    df.dropna(subset=['epi_name_normalized'], inplace=True)

    # Calcular entradas e sa√≠das usando o nome normalizado e preencher NaNs com 0
    epi_entries = df[df['transaction_type'].str.lower() == 'entrada'].groupby('epi_name_normalized')['quantity'].sum().fillna(0)
    epi_exits = df[df['transaction_type'].str.lower() == 'saida'].groupby('epi_name_normalized')['quantity'].sum().fillna(0)

    # Usar reindex().add() para garantir que todos os EPIs sejam considerados
    all_epis = epi_entries.index.union(epi_exits.index)
    total_epi = epi_entries.reindex(all_epis, fill_value=0) - epi_exits.reindex(all_epis, fill_value=0)

    # Verificar se h√° dados para plotar ap√≥s o c√°lculo
    if total_epi.empty or total_epi.isnull().all():
        st.warning("N√£o h√° dados de estoque v√°lidos para exibir no gr√°fico ap√≥s o c√°lculo.")
        return

    # Criar dois DataFrames separados: um para itens com estoque baixo/cr√≠tico e outro para o resto
    total_epi_sorted = total_epi.sort_values()
    
    # Identificar itens com estoque cr√≠tico (negativos ou zero)
    critical_stock = total_epi_sorted[total_epi_sorted <= 0]
    if not critical_stock.empty:
        st.error("### EPIs com Estoque Cr√≠tico ‚ö†Ô∏è")
        critical_df = pd.DataFrame({'Estoque': critical_stock})
        st.bar_chart(critical_df, use_container_width=True)
        
        # Mostrar lista detalhada dos itens cr√≠ticos
        st.write("Detalhamento dos itens cr√≠ticos:")
        for epi, qty in critical_stock.items():
            st.write(f"- {epi}: {int(qty) if qty == int(qty) else qty:.2f}")
    
    # Criar DataFrame com todos os itens em estoque (positivos)
    normal_stock = total_epi_sorted[total_epi_sorted > 0]
    if not normal_stock.empty:
        st.write("### Posi√ß√£o Atual do Estoque üìä")
        normal_df = pd.DataFrame({'Estoque': normal_stock})
        st.bar_chart(normal_df, use_container_width=True)
        
        # Adicionar uma tabela com os valores exatos
        st.write("Detalhamento do estoque:")
        stock_details = pd.DataFrame({
            'EPI': normal_stock.index,
            'Quantidade': normal_stock.values
        }).sort_values('Quantidade', ascending=False)
        
        st.dataframe(stock_details.style.format({'Quantidade': '{:.0f}'}), use_container_width=True)
    else:
        st.warning("N√£o h√° itens com estoque positivo.")

#-----------------------------------------------------------------------------------------------------------------------
    """
    Esta fun√ß√£o Python carrega dados de empregados de uma planilha especificada e retorna uma lista de
    nomes de empregados, exibindo uma mensagem de erro se os dados n√£o puderem ser carregados.
    
    :param sheet_operations: `sheet_operations` √© provavelmente um objeto ou m√≥dulo que cont√©m m√©todos para
    carregar dados de uma planilha ou worksheet. Nesta fun√ß√£o espec√≠fica `carregar_empregados`, parece ser
    usado para carregar dados de empregados de uma aba espec√≠fica chamada 'empregados'. A fun√ß√£o tenta
    carregar os dados,
    :return: A fun√ß√£o `carregar_empregados` retorna uma lista de nomes de empregados extra√≠dos da
    coluna 'name_empregado' do DataFrame `df_empregados`. Se houver um problema ao carregar os dados dos
    empregados, uma lista vazia √© retornada e uma mensagem de erro √© exibida usando `st.error`.
    """        
def carregar_empregados(sheet_operations):
    
    empregados_data = sheet_operations.carregar_dados_aba('empregados')
    if empregados_data:
        df_empregados = pd.DataFrame(empregados_data[1:], columns=empregados_data[0])
        return df_empregados['name_empregado'].tolist()
    else:
        st.error("N√£o foi poss√≠vel carregar os dados dos empregados")
        return []
    
#-----------------------------------------------------------------------------------------------------------------------    

def entrance_exit_edit_delete():
    """
    Esta fun√ß√£o Python gerencia a inser√ß√£o, edi√ß√£o e exclus√£o de registros de entrada e sa√≠da em uma planilha,
    com verifica√ß√µes de valida√ß√£o e campos de entrada para o usu√°rio.
    :return: A fun√ß√£o `entrance_exit_edit_delete()` retorna mensagens diferentes com base nas condi√ß√µes
    atendidas durante sua execu√ß√£o.  Os poss√≠veis valores retornados s√£o: mensagens de sucesso, erro ou
    avisos, dependendo se a opera√ß√£o foi bem sucedida, se houve algum erro durante a opera√ß√£o ou se
    algum campo obrigat√≥rio n√£o foi preenchido.  A fun√ß√£o tamb√©m pode n√£o retornar explicitamente nada
    (None) em alguns casos.
    """
    if not is_admin():
        st.error("Acesso negado. Apenas administradores podem realizar esta a√ß√£o.")
        return

    sheet_operations = SheetOperations()
    data = sheet_operations.carregar_dados()
    if data:
        df = pd.DataFrame(data[1:], columns=data[0])
    else:
        st.error("N√£o foi poss√≠vel carregar a planilha")
        return

    required_columns = ['id', 'epi_name', 'quantity', 'transaction_type', 'date', 'value', 'requester', 'CA']
    if not all(column in df.columns for column in required_columns):
        st.error("A planilha n√£o cont√©m todas as colunas necess√°rias.")
        return

    all_entrance_epi_names = df[df['transaction_type'] == 'entrada']['epi_name'].unique()
    empregados = carregar_empregados(sheet_operations)

    with st.expander("Inserir novo registro"):
        requester = None
        transaction_type = st.selectbox("Tipo de transa√ß√£o:", ["entrada", "sa√≠da"], key="transaction_type_add")

        if transaction_type == "entrada":
            epi_name = st.text_input("Nome do EPI:", "", key="epi_name_add")
        elif transaction_type == "sa√≠da":
            if len(all_entrance_epi_names) > 0:
                epi_name = st.selectbox("Nome do EPI:", all_entrance_epi_names, key="epi_name_select_add")
                ca_value = df[df['epi_name'] == epi_name]['CA'].values[0]
                st.text_input("CA:", value=ca_value, disabled=True, key="ca_display_add")
            else:
                st.write("N√£o h√° entradas registradas no banco de dados.")

        quantity = st.number_input("Quantidade:", min_value=0, step=1, key="quantity_add")
        value = st.number_input("Valor:", min_value=0.0, step=0.01, key="value_add") if transaction_type == "entrada" else 0
        ca = st.text_input("CA:", "", key="ca_add") if transaction_type == "entrada" else ca_value
        if transaction_type == "sa√≠da":
            requester = st.selectbox("Solicitante:", empregados, key="requester_add")
            exit_date = st.date_input("Data da sa√≠da:", key="date_add")
        
        if st.button("Adicionar", key="btn_add"):
            if epi_name and quantity:
                new_data = [epi_name, quantity, transaction_type, str(datetime.now().date()), value, requester, ca]
                sheet_operations.adc_dados(new_data)
                st.rerun()
            else:
                st.warning("Por favor, preencha todos os campos.")

    with st.expander("Editar registro existente"):
        all_ids = df['id'].tolist()
        selected_id = st.selectbox("Selecione a linha que ser√° editada:", all_ids, key="id_edit")

        if selected_id:
            selected_row = df[df['id'] == selected_id].iloc[0]
            epi_name = st.text_input("Nome do EPI:", value=selected_row["epi_name"], key="epi_name_edit")
            quantity = st.number_input("Quantidade:", value=int(selected_row["quantity"]), key="quantity_edit")
            value = st.number_input("Valor:", value=float(selected_row["value"]), key="value_edit")
            transaction_type = st.selectbox("Tipo de transa√ß√£o:", ["entrada", "sa√≠da"], 
                                         index=0 if selected_row["transaction_type"] == "entrada" else 1,
                                         key="transaction_type_edit")

            if st.button("Editar", key="btn_edit"):
                updated_data = [epi_name, quantity, transaction_type, selected_row["date"], value, selected_row["requester"], selected_row["CA"]]
                if sheet_operations.editar_dados(selected_id, updated_data):
                    st.success("EPI editado com sucesso!")
                    st.rerun()
                else:
                    st.error("Erro ao editar o registro.")

    with st.expander("Excluir registro existente"):
        all_epi_ids = df['id'].tolist()
        if all_epi_ids:
            selected_id = st.selectbox("Com Cautela! Selecione o ID da entrada ou sa√≠da para excluir:", 
                                     all_epi_ids, 
                                     key="id_delete")
            if st.button("Excluir", key="btn_delete"):
                if sheet_operations.excluir_dados(selected_id):
                    st.success(f"A entrada/sa√≠da com ID {selected_id} foi exclu√≠da com sucesso!")
                    st.rerun()
                else:
                    st.error("Erro ao excluir o registro.")
        else:
            st.write("N√£o h√° entradas/sa√≠das registradas no banco de dados.")


#-----------------------------------------------------------------------------------------------------------------------
def analyze_epi_usage_minimalist(df: pd.DataFrame, short_interval_days: int = 7):
    """
    Realiza uma an√°lise do uso de EPIs com apresenta√ß√£o minimalista,
    permitindo filtrar por ano e m√™s.

    Inclui:
    1. Top 3 EPIs mais requisitados (Lista de Texto).
    2. Top 3 Usu√°rios que mais requisitaram (Lista de Texto).
    3. An√°lise cruzada: EPIs mais requisitados pelos top usu√°rios (Tabelas Simples).
    4. An√°lise de frequ√™ncia: Identifica√ß√£o de requisi√ß√µes frequentes (Texto/Tabela).

    Args:
        df (pd.DataFrame): DataFrame com colunas: 'date', 'transaction_type',
                           'epi_name', 'quantity', 'requester'.
        short_interval_days (int): Limite em dias para requisi√ß√µes frequentes.

    Returns:
        None: Exibe os resultados na interface do Streamlit.

    Raises:
        TypeError: Se df n√£o for um DataFrame.
        ValueError: Se colunas essenciais faltarem ou dados forem inv√°lidos.
    """
    st.subheader("Filtros de An√°lise")

    # --- 1. Valida√ß√£o de Entrada ---
    if not isinstance(df, pd.DataFrame):
        st.error("Erro: O input fornecido n√£o √© um DataFrame do Pandas.")
        raise TypeError("O input deve ser um DataFrame do Pandas.")

    required_columns = ['date', 'transaction_type', 'epi_name', 'quantity', 'requester']
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        st.error(f"Erro: Colunas essenciais ausentes: {', '.join(missing_columns)}")
        raise ValueError(f"Colunas ausentes: {', '.join(missing_columns)}")

    # --- 2. Pr√©-processamento Inicial e Limpeza ---
    try:
        df_processed = df.copy()
        # Padronizar tipo de transa√ß√£o
        df_processed['transaction_type'] = df_processed['transaction_type'].fillna('').astype(str).str.lower().str.strip()
        df_saidas = df_processed[df_processed['transaction_type'] == 'sa√≠da'].copy()

        if df_saidas.empty:
            st.warning("Nenhuma transa√ß√£o do tipo 'sa√≠da' encontrada no DataFrame original.")
            return

        # Limpeza e convers√£o de 'date' - FAZER ANTES DA FILTRAGEM
        original_rows_date = len(df_saidas)
        df_saidas['date'] = pd.to_datetime(df_saidas['date'], errors='coerce')
        df_saidas.dropna(subset=['date'], inplace=True)
        removed_date = original_rows_date - len(df_saidas)
        if removed_date > 0:
            st.warning(f"Aten√ß√£o: {removed_date} linha(s) de 'sa√≠da' com 'date' inv√°lida ou vazia foram removidas ANTES da filtragem.")

        if df_saidas.empty:
            st.warning("Nenhum dado v√°lido de 'sa√≠da' com data v√°lida restante.")
            return

        # Extrair Ano e M√™s para filtragem
        df_saidas['year'] = df_saidas['date'].dt.year
        df_saidas['month'] = df_saidas['date'].dt.month

        # --- 3. Widgets de Filtragem (Ano e M√™s) ---
        available_years = sorted(df_saidas['year'].unique(), reverse=True)
        if not available_years:
             st.warning("N√£o foi poss√≠vel extrair anos v√°lidos das datas.")
             return

        selected_year = st.selectbox("Selecione o Ano:", options=available_years)

        # Filtrar meses dispon√≠veis PARA o ano selecionado
        months_in_year = sorted(df_saidas[df_saidas['year'] == selected_year]['month'].unique())
        # Criar dicion√°rio para mapear n√∫mero do m√™s para nome (Portugu√™s)
        # Usando calendar para obter nomes em ingl√™s e traduzindo manualmente (simplificado)
        # Uma biblioteca de localiza√ß√£o seria mais robusta (ex: Babel)
        month_map_pt = {
            1: "Janeiro", 2: "Fevereiro", 3: "Mar√ßo", 4: "Abril", 5: "Maio", 6: "Junho",
            7: "Julho", 8: "Agosto", 9: "Setembro", 10: "Outubro", 11: "Novembro", 12: "Dezembro"
        }
        available_month_names = ["Todos os Meses"] + [month_map_pt.get(m, f"M√™s {m}") for m in months_in_year]

        selected_month_name = st.selectbox("Selecione o M√™s:", options=available_month_names)

        # --- 4. Filtragem Efetiva dos Dados ---
        df_filtered = df_saidas[df_saidas['year'] == selected_year].copy()

        if selected_month_name != "Todos os Meses":
            # Encontrar o n√∫mero do m√™s correspondente ao nome selecionado
            selected_month_number = None
            for num, name in month_map_pt.items():
                if name == selected_month_name:
                    selected_month_number = num
                    break
            if selected_month_number:
                df_filtered = df_filtered[df_filtered['month'] == selected_month_number].copy()
            else:
                st.error("Erro ao identificar o m√™s selecionado.") # Should not happen with selectbox
                return

        if df_filtered.empty:
            st.info(f"Nenhum dado de 'sa√≠da' encontrado para {selected_month_name} / {selected_year}.")
            return

        # --- 5. Limpeza Adicional nos Dados Filtrados ---

        # Limpeza e convers√£o de 'quantity'
        original_rows_qty = len(df_filtered)
        df_filtered['quantity'] = pd.to_numeric(df_filtered['quantity'], errors='coerce')
        df_filtered.dropna(subset=['quantity'], inplace=True)
        removed_quantity = original_rows_qty - len(df_filtered)
        if removed_quantity > 0:
            st.warning(f"Aten√ß√£o: {removed_quantity} linha(s) com 'quantity' inv√°lida ou vazia foram removidas do per√≠odo selecionado.")

        # Tentar converter 'quantity' para int se todos forem inteiros
        if not df_filtered.empty and pd.api.types.is_float_dtype(df_filtered['quantity']):
             if (df_filtered['quantity'].fillna(0) % 1 == 0).all(): # Handle potential NaNs introduced by coerce before dropna
                 try:
                     df_filtered['quantity'] = df_filtered['quantity'].astype(int)
                 except ValueError:
                     pass # Mant√©m como float se a convers√£o falhar

        # Limpeza de texto (remover espa√ßos extras)
        df_filtered['epi_name'] = df_filtered['epi_name'].fillna('').astype(str).str.strip()
        df_filtered['requester'] = df_filtered['requester'].fillna('').astype(str).str.strip()

        # Remover linhas onde EPI ou requisitante ficou vazio ap√≥s strip
        df_filtered = df_filtered[(df_filtered['epi_name'] != '') & (df_filtered['requester'] != '')]

        if df_filtered.empty:
            st.info(f"Nenhum dado v√°lido (com EPI, Requisitante e Quantidade v√°lidos) encontrado para {selected_month_name} / {selected_year} ap√≥s limpeza final.")
            return

    except Exception as e:
        st.error(f"Erro durante o pr√©-processamento ou filtragem: {e}")
        # Optionally re-raise if debugging: raise e
        return # Impede a continua√ß√£o se houver erro aqui

    # --- 6. An√°lises e Apresenta√ß√£o Minimalista (usando df_filtered) ---
    st.divider() # Linha divis√≥ria ap√≥s os filtros
    period_str = f"{selected_month_name} / {selected_year}" if selected_month_name != "Todos os Meses" else f"Todo o ano de {selected_year}"
    st.header(f"An√°lise de Utiliza√ß√£o de EPIs (Sa√≠das) - {period_str}")

    # 6.1. Top EPIs (Texto)
    st.subheader("Top 3 EPIs Utilizados")
    try:
        top_epis_series = df_filtered.groupby('epi_name')['quantity'].sum().sort_values(ascending=False).head(3)
        if not top_epis_series.empty:
            for i, (epi, quantity) in enumerate(top_epis_series.items(), 1):
                 qty_str = f"{int(quantity):,}" if quantity == int(quantity) else f"{quantity:,.2f}"
                 st.text(f"{i}. {epi}: {qty_str}")
        else:
            st.info(f"Sem dados de EPIs para listar no per√≠odo ({period_str}).")
    except Exception as e:
        st.error(f"Erro na an√°lise de top EPIs: {e}")

    # 6.2. Top Usu√°rios (Texto)
    st.subheader("Top 3 Usu√°rios (Requisi√ß√µes)")
    try:
        top_users_series = df_filtered.groupby('requester')['quantity'].sum().sort_values(ascending=False).head(3)
        if not top_users_series.empty:
            top_users_list = top_users_series.index.tolist()
            for i, (user, quantity) in enumerate(top_users_series.items(), 1):
                 qty_str = f"{int(quantity):,}" if quantity == int(quantity) else f"{quantity:,.2f}"
                 st.text(f"{i}. {user}: {qty_str}")
        else:
            st.info(f"Sem dados de usu√°rios para listar no per√≠odo ({period_str}).")
            top_users_list = []
    except Exception as e:
        st.error(f"Erro na an√°lise de top usu√°rios: {e}")
        top_users_list = []

    # 6.3. An√°lise Cruzada: EPIs por Top Usu√°rio (Tabelas Simples)
    st.subheader("An√°lise: EPIs por Top Usu√°rio") # 'Crossed Swords' Emoji
    if not top_users_list:
        st.info(f"An√°lise n√£o dispon√≠vel (sem top usu√°rios identificados no per√≠odo {period_str}).")
    else:
        try:
            # Filtrar novamente o df_filtered S√ì para os top usu√°rios (j√° est√° filtrado por per√≠odo)
            df_top_users_data = df_filtered[df_filtered['requester'].isin(top_users_list)]

            if df_top_users_data.empty:
                 # Isso n√£o deveria acontecer se top_users_list foi gerado de df_filtered, mas √© uma checagem segura
                 st.info(f"N√£o h√° dados de requisi√ß√£o para os top usu√°rios identificados no per√≠odo ({period_str}).")
            else:
                # Calcular uso por EPI para os top usu√°rios NO PER√çODO
                user_epi_usage = df_top_users_data.groupby(['requester', 'epi_name'])['quantity'].sum().reset_index()

                # Iterar sobre a lista ordenada de top usu√°rios (mant√©m a ordem do top 3)
                for user in top_users_list:
                    st.markdown(f"**{user}**") # Nome do usu√°rio em negrito
                    # Pegar os dados DESTE usu√°rio NO PER√çODO
                    user_data = user_epi_usage[user_epi_usage['requester'] == user].sort_values(by='quantity', ascending=False).head(5) # Top 5 EPIs por usu√°rio no per√≠odo

                    if not user_data.empty:
                        user_data_display = user_data[['epi_name', 'quantity']].rename(columns={'epi_name': 'EPI', 'quantity': 'Quantidade'})
                        # Formatar quantidade na tabela
                        user_data_display['Quantidade'] = user_data_display['Quantidade'].apply(
                            lambda x: f"{int(x):,}" if x == int(x) else f"{x:,.2f}"
                        )
                        st.table(user_data_display.set_index('EPI'))
                    else:
                        # Mensagem se o usu√°rio (que est√° no top 3 geral do per√≠odo) n√£o tiver dados *cruzados* (raro, mas poss√≠vel se dados foram limpos entre etapas)
                        st.caption(f"Nenhum EPI espec√≠fico registrado para este usu√°rio no per√≠odo {period_str}.")
                    # st.markdown("---") # Remover divis√≥ria entre usu√°rios

        except Exception as e:
            st.error(f"Erro na an√°lise cruzada usu√°rio x EPI: {e}")

    # 6.4. An√°lise de Frequ√™ncia (Texto e Tabela opcional)
    st.subheader(f"Requisi√ß√µes Frequentes (Intervalo ‚â§ {short_interval_days} dias)")
    try:
        if len(df_filtered) < 2:
             st.info(f"Dados insuficientes para an√°lise de frequ√™ncia no per√≠odo ({period_str}).")
             # N√£o retorna aqui, pois pode haver outras an√°lises v√°lidas.
        else:
            # Ordenar dentro do per√≠odo filtrado
            df_sorted = df_filtered.sort_values(by=['requester', 'epi_name', 'date']).copy()
            # Calcular diferen√ßa apenas para o mesmo usu√°rio e mesmo EPI DENTRO DO PER√çODO
            df_sorted['time_since_prev_request'] = df_sorted.groupby(['requester', 'epi_name'])['date'].diff()
            threshold_timedelta = pd.Timedelta(days=short_interval_days)

            # Filtrar requisi√ß√µes frequentes (n√£o nulas e dentro do threshold) NO PER√çODO
            frequent_requests = df_sorted[
                df_sorted['time_since_prev_request'].notna() &
                (df_sorted['time_since_prev_request'] <= threshold_timedelta)
            ].copy()

            if not frequent_requests.empty:
                count = len(frequent_requests)
                st.warning(f"Identificada(s) {count} requisi√ß√£o(√µes) feita(s) em intervalo curto no per√≠odo ({period_str}).")

                # Resumo textual simples
                st.markdown("**Resumo:**")
                top_freq_users = frequent_requests['requester'].value_counts().head(3)
                top_freq_epis = frequent_requests['epi_name'].value_counts().head(3)

                if not top_freq_users.empty:
                    st.text("Usu√°rios mais envolvidos:")
                    for user, num in top_freq_users.items():
                        st.text(f"- {user} ({num} ocorr√™ncia(s))")

                if not top_freq_epis.empty:
                    st.text("EPIs mais envolvidos:")
                    for epi, num in top_freq_epis.items():
                        st.text(f"- {epi} ({num} ocorr√™ncia(s))")

                # Detalhes em um expander
                with st.expander(f"Ver detalhes das {count} requisi√ß√µes frequentes ({period_str})"):
                    frequent_requests_display = frequent_requests[[
                        'date', 'requester', 'epi_name', 'quantity', 'time_since_prev_request'
                    ]].rename(columns={
                        'date': 'Data',
                        'requester': 'Requisitante',
                        'epi_name': 'EPI',
                        'quantity': 'Qtd.',
                        'time_since_prev_request': 'Intervalo Anterior' # Renomeado para clareza
                    }).sort_values(by='Data', ascending=False) # Ordenar por data recente

                    # Formatar colunas para melhor leitura
                    frequent_requests_display['Data'] = frequent_requests_display['Data'].dt.strftime('%d/%m/%Y')
                    frequent_requests_display['Intervalo Anterior'] = frequent_requests_display['Intervalo Anterior'].apply(lambda x: f"{x.days} dias")
                    frequent_requests_display['Qtd.'] = frequent_requests_display['Qtd.'].apply(
                        lambda x: f"{int(x):,}" if x == int(x) else f"{x:,.2f}"
                    )

                    st.dataframe(frequent_requests_display, hide_index=True, use_container_width=True)

            else:
                st.success(f"Nenhuma requisi√ß√£o frequente identificada no per√≠odo ({period_str}, intervalo ‚â§ {short_interval_days} dias).")

    except KeyError as e:
         st.error(f"Erro na an√°lise de frequ√™ncia: Coluna necess√°ria n√£o encontrada ({e}). Verifique os nomes das colunas.")
    except Exception as e:
        st.error(f"Erro inesperado na an√°lise de frequ√™ncia: {e}")





