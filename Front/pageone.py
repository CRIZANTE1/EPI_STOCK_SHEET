import streamlit as st
import pandas as pd
from End.Operations import SheetOperations
from datetime import datetime
from fuzzywuzzy import process
import altair as alt

def configurar_pagina():
    st.set_page_config(
        page_title="P√°gina Inicial",
        page_icon="üìã",
        layout="wide",
        initial_sidebar_state="expanded"
    )

def sidebar():
    with st.sidebar:
        page = st.sidebar.selectbox("Selecione a p√°gina:", ["P√°gina Inicial", "Administra√ß√£o"])
        if page == "P√°gina Inicial":  # P√°gina inicial da aplica√ß√£o
            st.caption('EPI Stock Management')
            
        
        
def front_page():
    
    st.title("Controle de Estoque de EPIs") 
       
    sheet_operations = SheetOperations()

    if 'data' not in st.session_state:
        data = sheet_operations.carregar_dados()
        if data:
            df = pd.DataFrame(data[1:], columns=data[0])
            st.session_state['data'] = df
        else:
            st.error("N√£o foi poss√≠vel carregar a planilha")
            return

    if 'data' in st.session_state:
        df = st.session_state['data']
        
    # Converter a coluna 'Date' para o formato datetime
    df['date'] = pd.to_datetime(df['date'], errors='coerce')
    
    # Tratar valores vazios na coluna 'value' antes de converter
    df['value'] = df['value'].apply(lambda x: 0 if x == '' else float(str(x).replace('.', '').replace(',', '.')))

    # Primeiro mostrar as fun√ß√µes de edi√ß√£o
    entrance_exit_edit_delete()

    # Depois mostrar o DataFrame
    st.write("### Registros de Entradas e Sa√≠das")
    st.dataframe(data=df,
                 column_config={
                     'value': st.column_config.NumberColumn(
                         "Valor",
                         help="O pre√ßo do material em Reais",
                         min_value=0,
                         max_value=100000,
                         step=1,
                         format='$ %.2f'
                     ),
                     'epi_name': st.column_config.TextColumn(
                         'Equipamento',
                         help='Nome do EPI',
                         default='st.',
                         max_chars=50,
                     ),
                     'quantity': st.column_config.NumberColumn(
                         'Quantidade',
                         help='Quantidade de EPI',
                         min_value=0,
                         max_value=1000000,
                         step=1,
                         format='%.0f',
                     ),
                     'transaction_type': st.column_config.TextColumn(
                         'Transa√ß√£o',
                         help='Entrada ou Sa√≠da',
                         default='st.',
                         max_chars=50,
                     ),
                     'CA': st.column_config.NumberColumn(
                         'CA',
                         help='Certificado de Aprova√ß√£o se aplic√°vel',
                         min_value=0,
                         max_value=1000000,
                         step=1,
                         format='%.0f',
                     ),
                     'date': st.column_config.DateColumn(
                         'Data',
                         help='Data da transa√ß√£o',
                         format='DD/MM/YYYY',
                         step=1,
                     ),
                     'requester': st.column_config.TextColumn(
                         'Requisitante',
                         help='Requisitante do Equipamento',
                         default='st.',
                         max_chars=50,
                     ),
                 }, hide_index=True)    
    
    # Por √∫ltimo, mostrar o gr√°fico
    st.write("### An√°lise do Estoque")
    calc_position(df)

#-----------------------------------------------------------------------------------------------------------------------
    """
    A fun√ß√£o `calc_position` calcula a posi√ß√£o atual do estoque de itens com base nos dados de entrada e
    visualiza os resultados usando Altair para exibir um gr√°fico de barras.
    
    :param name: O par√¢metro `name` na fun√ß√£o `get_closest_match_name` √© o nome para o qual voc√™
    deseja encontrar a correspond√™ncia mais pr√≥xima na lista de op√ß√µes
    :param choices: O par√¢metro `choices` na fun√ß√£o `get_closest_match_name` representa uma lista
    de op√ß√µes ou nomes para comparar com o `name` de entrada a fim de encontrar a correspond√™ncia mais pr√≥xima usando
    correspond√™ncia de string difusa
    :return: A fun√ß√£o `calc_position` retorna uma visualiza√ß√£o da posi√ß√£o atual do estoque para
    os 10 menores valores, incluindo valores negativos e zero, usando Altair. A fun√ß√£o calcula
    o estoque atual subtraindo as sa√≠das totais das entradas totais de itens de Equipamento de Prote√ß√£o Individual (EPI) em um DataFrame, 
    depois seleciona os 10 menores valores para visualiza√ß√£o em um gr√°fico de barras. Se os valores de estoque calculados
    """
def get_closest_match_name(name, choices):
    # Retorna o nome mais aproximado usando a fun√ß√£o `extractOne` do fuzzywuzzy
    closest_match, score = process.extractOne(name, choices)
    return closest_match if score > 99 else name

def calc_position(df):
    # Garantir que a coluna 'quantity' seja num√©rica, for√ßando erros a se tornarem NaN
    df['quantity'] = pd.to_numeric(df['quantity'], errors='coerce')
    
    # Obter os nomes √∫nicos dos EPIs e mapear para o nome mais pr√≥ximo
    unique_epi_names = df['epi_name'].unique()
    name_mapping = {name: get_closest_match_name(name, unique_epi_names) for name in unique_epi_names}
    df['epi_name'] = df['epi_name'].map(name_mapping)
    
    # Calcular o estoque atual (entrada - sa√≠da)
    epi_entries = df[df['transaction_type'] == 'entrada'].groupby('epi_name')['quantity'].sum()
    epi_exits = df[df['transaction_type'] == 'saida'].groupby('epi_name')['quantity'].sum()
    
    # Subtrair as sa√≠das das entradas para obter o estoque
    total_epi = epi_entries - epi_exits
    
    # Selecionar os 10 menores valores, incluindo negativos e zerados
    total_epi = total_epi.sort_values().head(10)
    
    # Verifique se o total_epi est√° vazio ou cont√©m valores v√°lidos
    if total_epi.empty:
        st.warning("O c√°lculo do estoque resultou em nenhum valor ou todos os valores s√£o iguais.")
        return
    
    # Criar um dataframe para o gr√°fico
    total_epi_df = total_epi.reset_index()
    total_epi_df.columns = ['EPI', 'Estoque']
    
    # Criar o gr√°fico com Altair
    chart = alt.Chart(total_epi_df).mark_bar().encode(
        x=alt.X('EPI:N', title='Tipo de EPI'),
        y=alt.Y('Estoque:Q', title='Estoque'),
        color=alt.Color('Estoque:Q', scale=alt.Scale(scheme='redyellowgreen')),  # Alterar o esquema de cores
        tooltip=['EPI', 'Estoque']
    ).properties(
        title='Demonstrativo da posi√ß√£o do estoque atual (10 menores valores)'
    )
    
    # Exibir o gr√°fico
    st.altair_chart(chart, use_container_width=True)
    

#-----------------------------------------------------------------------------------------------------------------------
"""
    Esta fun√ß√£o Python carrega dados de empregados de uma planilha especificada e retorna uma lista de
    nomes de empregados, exibindo uma mensagem de erro se os dados n√£o puderem ser carregados.
    
    :param sheet_operations: `sheet_operations` √© provavelmente um objeto ou m√≥dulo que cont√©m m√©todos para
    carregar dados de uma planilha ou worksheet. Nesta fun√ß√£o espec√≠fica `carregar_empregados`, parece ser
    usado para carregar dados de empregados de uma aba espec√≠fica chamada 'empregados'. A fun√ß√£o tenta
    carregar os dados,
    :return: A fun√ß√£o `carregar_empregados` retorna uma lista de nomes de empregados extra√≠dos da
    coluna 'name_empregado' do DataFrame `df_empregados`. Se houver um problema ao carregar os dados dos
    empregados, uma lista vazia √© retornada e uma mensagem de erro √© exibida usando `st.error`.
    """        
def carregar_empregados(sheet_operations):
    
    empregados_data = sheet_operations.carregar_dados_aba('empregados')
    if empregados_data:
        df_empregados = pd.DataFrame(empregados_data[1:], columns=empregados_data[0])
        return df_empregados['name_empregado'].tolist()
    else:
        st.error("N√£o foi poss√≠vel carregar os dados dos empregados")
        return []
    
#-----------------------------------------------------------------------------------------------------------------------    

from auth import is_admin

def entrance_exit_edit_delete():
    if not is_admin():
        st.error("Acesso negado. Apenas administradores podem realizar esta a√ß√£o.")
        return

    sheet_operations = SheetOperations()
    data = sheet_operations.carregar_dados()
    if data:
        df = pd.DataFrame(data[1:], columns=data[0])
    else:
        st.error("N√£o foi poss√≠vel carregar a planilha")
        return

    required_columns = ['id', 'epi_name', 'quantity', 'transaction_type', 'date', 'value', 'requester', 'CA']
    if not all(column in df.columns for column in required_columns):
        st.error("A planilha n√£o cont√©m todas as colunas necess√°rias.")
        return

    # Verificar a presen√ßa da coluna 'Date' e renome√°-la se necess√°rio
    if 'date' in df.columns:
        df.rename(columns={'date': 'Date'}, inplace=True)

    all_entrance_epi_names = df[df['transaction_type'] == 'entrada']['epi_name'].unique()
    empregados = carregar_empregados(sheet_operations)

    with st.expander("Inserir novo registro"):  # Expander para inser√ß√£o
        requester = None
        transaction_type = st.selectbox("Tipo de transa√ß√£o:", ["entrada", "sa√≠da"])

        if transaction_type == "entrada":
            epi_name = st.text_input("Nome do EPI:", "")
        elif transaction_type == "sa√≠da":
            if len(all_entrance_epi_names) > 0:
                epi_name = st.selectbox("Nome do EPI:", all_entrance_epi_names)
                ca_value = df[df['epi_name'] == epi_name]['CA'].values[0]
                st.text_input("CA:", value=ca_value, disabled=True)
            else:
                st.write("N√£o h√° entradas registradas no banco de dados.")

        quantity = st.number_input("Quantidade:", min_value=0, step=1)
        value = st.number_input("Valor:", min_value=0.0, step=0.01) if transaction_type == "entrada" else 0
        ca = st.text_input("CA:", "") if transaction_type == "entrada" else ca_value
        if transaction_type == "sa√≠da":
            requester = st.selectbox("Solicitante:", empregados)
            exit_date = st.date_input("Data da sa√≠da:")
        
        if st.button("Adicionar"):
            if epi_name and quantity:
                new_data = [epi_name, quantity, transaction_type, str(datetime.now().date()), value, requester, ca]
                sheet_operations.adc_dados(new_data)
            else:
                st.warning("Por favor, preencha todos os campos.")

    with st.expander("Editar registro existente"):  # Expander para edi√ß√£o
        all_ids = df['id'].tolist()
        selected_id = st.selectbox("Selecione a linha que ser√° editada:", all_ids)

        if selected_id:
            st.session_state.id = selected_id

        if st.session_state.get('id'):
            id = st.session_state.id
            selected_row = df[df['id'] == id].iloc[0]
            epi_name = st.text_input("Nome do EPI:", value=selected_row["epi_name"])
            quantity = st.number_input("Quantidade:", value=int(selected_row["quantity"]))
            value = st.number_input("Valor:", value=float(selected_row["value"]))
            transaction_type = st.text_input("Tipo de transa√ß√£o:", value=selected_row["transaction_type"])

            if st.button("Editar"):
                df.loc[df['id'] == id, ["epi_name", "quantity", "value", "transaction_type"]] = [epi_name, quantity, value, transaction_type]
                st.success("EPI editado com sucesso!")
                del st.session_state['id']

    with st.expander("Excluir registro existente"):  # Expander para exclus√£o
        all_epi_ids = df['id'].tolist()

        if all_epi_ids:
            selected_id = st.selectbox("Com Cautela! Selecione o ID da entrada ou sa√≠da para excluir:", all_epi_ids)
            if st.button("Excluir"):
                df = df[df['id'] != selected_id]
                st.success(f"A entrada/sa√≠da com ID {selected_id} foi exclu√≠da com sucesso!")
        else:
            st.write("N√£o h√° entradas/sa√≠das registradas no banco de dados.")
